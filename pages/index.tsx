import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { getAllReports, getTotalReports } from "../lib/api";
import Report, { ReportDTO } from "../lib/Report";
import styles from "../styles/Home.module.scss";

interface Data {
  reports: ReportDTO[];
  pagination: {
    page: number;
    limit: number;
  };
  total: number;
}

const Home: NextPage<Data> = ({ reports, pagination, total }) => {
  const { page, limit } = pagination;

  return (
    <div className="container">
      <Head>
        <title>TBEZ</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          httpEquiv="Content-Security-Policy"
          content="upgrade-insecure-requests"
        />
        <link rel="icon" href="/logo.png" />
      </Head>

      <main className="main">
        <h1 className="title">
          <Link href="/">
            <a>
              TB<span>EZ</span>
            </a>
          </Link>
        </h1>

        <p className="description">
          Tutti i contenuti di Teleboario senza noia.
        </p>

        <div className="grid">
          <p>
            Servizi da {page * limit} a {(page + 1) * limit} di {total}
          </p>
          <Link href={`/?page=${page - 1 < 0 ? 0 : page - 1}&limit=${limit}`}>
            <a className={styles.nav} style={{ marginLeft: "1rem" }}>
              Indietro
            </a>
          </Link>
          <Link href={`/?page=${page + 1}&limit=${limit}`}>
            <a className={styles.nav} style={{ marginLeft: "1rem" }}>
              Avanti
            </a>
          </Link>
        </div>

        <div className="grid">
          {reports.map((report, i) => (
            <div key={i} className={styles.card}>
              <ReportCard report={report} />
            </div>
          ))}
        </div>
      </main>

      <footer className="footer">
        <p>
          TB<span>EZ</span> | Tutti i contenuti di Teleboario senza noia.
        </p>
      </footer>
    </div>
  );
};

const ReportCard = ({ report }: { report: ReportDTO }) => {
  return (
    <Link href={`/reports/${report.id}`}>
      <a>
        <h2>{report.name.toLowerCase()} &rarr; </h2>
        <div className={styles.badges}>
          {report.publishedAt && (
            <span className={styles.badge}>
              ðŸ“… {dateStr(new Date(Date.parse(report.publishedAt)))}
            </span>
          )}{" "}
          <span className={styles.badge}>ðŸ’¾ {report.size}</span>
        </div>
      </a>
    </Link>
  );
};

export default Home;

export async function getServerSideProps({ query }: any) {
  const page = new Number(query.page).valueOf() || 0;
  const limit = new Number(query.limit).valueOf() || 10;

  function revive(obj: any) {
    const updatedAt = obj.updatedAt
      ? new Date(Date.parse(obj.updatedAt))
      : undefined;
    const publishedAt = obj.publishedAt
      ? new Date(Date.parse(obj.publishedAt))
      : undefined;

    return { ...obj, updatedAt, publishedAt };
  }

  const reports = await getAllReports(page, limit);
  const total = await getTotalReports();

  return {
    props: {
      reports,
      total: total.n,
      pagination: { page, limit },
    },
  };
}

function dateStr(date: Date) {
  var dd = String(date.getDate()).padStart(2, "0");
  var mm = String(date.getMonth() + 1).padStart(2, "0"); //January is 0!
  var yyyy = date.getFullYear();

  return dd + "/" + mm + "/" + yyyy;
}
